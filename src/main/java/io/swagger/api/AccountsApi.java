/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.Account;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-18T19:26:09.389Z[GMT]")
@Api(value = "accounts", description = "the accounts API")
public interface AccountsApi {

    @ApiOperation(value = "Deletes an account", nickname = "accountsDelete", notes = "", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Account has been deleted."),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Account not found") })
    @RequestMapping(value = "/accounts",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> accountsDelete(@ApiParam(value = "Account IBAN to delete",required=true) @PathVariable("IBAN") String IBAN
);


    @ApiOperation(value = "Retrieve all accounts", nickname = "accountsGet", notes = "Calling this allows you to display all bank accounts", response = Account.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Account.class, responseContainer = "List") })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> accountsGet(@ApiParam(value = "The number of items to skip before starting to collect the result set") @Valid @RequestParam(value = "offset", required = false) Integer offset
,@ApiParam(value = "The numbers of items to return") @Valid @RequestParam(value = "limit", required = false) Integer limit
,@ApiParam(value = "The balance of the account") @Valid @RequestParam(value = "balance", required = false) Integer balance
);


    @ApiOperation(value = "Find account by IBAN", nickname = "accountsIBANGet", notes = "Returns a single account", response = Account.class, authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Account.class),
        @ApiResponse(code = 400, message = "Invalid IBAN supplied"),
        @ApiResponse(code = 404, message = "Account not found") })
    @RequestMapping(value = "/accounts/{IBAN}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Account> accountsIBANGet(@ApiParam(value = "Account IBAN to find",required=true) @PathVariable("IBAN") String IBAN
);


    @ApiOperation(value = "Find account by IBAN", nickname = "accountsIBANPut", notes = "Returns a single account", response = Account.class, authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Account.class),
        @ApiResponse(code = 400, message = "Invalid IBAN supplied"),
        @ApiResponse(code = 404, message = "Account not found") })
    @RequestMapping(value = "/accounts/{IBAN}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Account> accountsIBANPut(@ApiParam(value = "Account IBAN to find",required=true) @PathVariable("IBAN") String IBAN
,@ApiParam(value = ""  )  @Valid @RequestBody Account body
);


    @ApiOperation(value = "Create a new account", nickname = "accountsPost", notes = "", response = Account.class, authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created", response = Account.class),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Account> accountsPost(@ApiParam(value = "creates a new account for a existing user" ,required=true )  @Valid @RequestBody Account body
);

}
