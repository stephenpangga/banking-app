/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ExtendedTransaction;
import io.swagger.model.Transaction;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-15T11:53:10.455Z[GMT]")
@Api(value = "transactions", description = "the transactions API")
public interface TransactionsApi {

    @ApiOperation(value = "call transactions by IBAN or no IBAN to gather all transaction.", nickname = "getTransactions", notes = "returns all specific transaction of User Bank account", response = ExtendedTransaction.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the transaction data", response = ExtendedTransaction.class, responseContainer = "List") })
    @RequestMapping(value = "/transactions",
        produces = { "applicaton/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ExtendedTransaction>> getTransactions(@ApiParam(value = "The number of items to skip before starting to collect the result set") @Valid @RequestParam(value = "offset", required = false) Integer offset
,@ApiParam(value = "The numbers of items to return") @Valid @RequestParam(value = "limit", required = false) Integer limit
,@ApiParam(value = "get all transaction") @Valid @RequestParam(value = "iban", required = false) String iban
,@ApiParam(value = "show transaction depending from account") @Valid @RequestParam(value = "From Account", required = false) String fromAccount
,@ApiParam(value = "show transaction depending to account") @Valid @RequestParam(value = "To Account", required = false) String toAccount
,@ApiParam(value = "show transaction based on date") @Valid @RequestParam(value = "date", required = false) String date
,@ApiParam(value = "show transaction based on max amount") @Valid @RequestParam(value = "max-amount", required = false) String maxAmount
,@ApiParam(value = "show transaction based on min amount") @Valid @RequestParam(value = "min-amount", required = false) String minAmount
,@ApiParam(value = "show transaction based on the user performing") @Valid @RequestParam(value = "user-performing", required = false) String userPerforming
);


    @ApiOperation(value = "call transactions by IBAN or no IBAN to gather all transaction.", nickname = "getTransactionsbyId", notes = "returns all specific transaction of User Bank account", response = ExtendedTransaction.class, authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the transaction data", response = ExtendedTransaction.class) })
    @RequestMapping(value = "/transactions/{transactionId}",
        produces = { "applicaton/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ExtendedTransaction> getTransactionsbyId(@ApiParam(value = "User id to get from the database",required=true) @PathVariable("transactionId") Integer transactionId
);


    @ApiOperation(value = "transfer money from a user to another users current account", nickname = "transferMoney", notes = "transfer money to a current account to a different user current acc", response = Transaction.class, authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transaction approve", response = Transaction.class),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 403, message = "Insufficient balance") })
    @RequestMapping(value = "/transactions",
        produces = { "applicaton/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Transaction> transferMoney(@ApiParam(value = ""  )  @Valid @RequestBody Transaction body
);

}
